// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                     @id @default(autoincrement())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  email                   String                  @unique
  name                    String
  hash                    String
  role                    Role                    @default(USER)
  intervals               ReadingInterval[]
  UserBookReadingInterval UniqueReadingInterval[]
}

model Book {
  id                      Int                     @id @default(autoincrement())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  name                    String
  numOfPages              Int
  readingIntervals        ReadingInterval[]
  UserBookReadingInterval UniqueReadingInterval[]
}

model ReadingInterval {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startPage Int
  endPage   Int
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model UniqueReadingInterval {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startPage Int
  endPage   Int
  // numOfReadPages Int      computed
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@unique([bookId, userId])
}

enum Role {
  ADMIN
  USER
}
